3.1: Pointwise operations
3.1.1: add
tensor1: 
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
tensor2: 
[[0.200000, 1.300000], 
 [2.300000, 3.200000], 
 [4.800000, 5.100000]]
add(t1, t2) 
[[0.300000, 2.500000], 
 [4.500000, 6.300000], 
 [9.700000, 10.300000]]
t1.add(t2): 
[[0.300000, 2.500000], 
 [4.500000, 6.300000], 
 [9.700000, 10.300000]]
t1 + t2
[[0.300000, 2.500000], 
 [4.500000, 6.300000], 
 [9.700000, 10.300000]]
add(t1, 1.0)
[[1.100000, 2.200000], 
 [3.200000, 4.100000], 
 [5.900000, 6.200000]]
t1.add(1.0)
[[1.100000, 2.200000], 
 [3.200000, 4.100000], 
 [5.900000, 6.200000]]

3.1.2: sub
tensor1: 
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
tensor2: 
[[0.200000, 1.300000], 
 [2.300000, 3.200000], 
 [4.800000, 5.100000]]
sub(t1, t2) 
[[-0.100000, -0.100000], 
 [-0.100000, -0.100000], 
 [0.100000, 0.100000]]
t1.sub(t2): 
[[-0.100000, -0.100000], 
 [-0.100000, -0.100000], 
 [0.100000, 0.100000]]
t1 - t2
[[-0.100000, -0.100000], 
 [-0.100000, -0.100000], 
 [0.100000, 0.100000]]
sub(t1, 1.0)
[[-0.900000, 0.200000], 
 [1.200000, 2.100000], 
 [3.900000, 4.200000]]
t1.sub(1.0)
[[-0.900000, 0.200000], 
 [1.200000, 2.100000], 
 [3.900000, 4.200000]]

3.1.3: mul
tensor1: 
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
tensor2: 
[[0.200000, 1.300000], 
 [2.300000, 3.200000], 
 [4.800000, 5.100000]]
mul(t1, t2) 
[[0.020000, 1.560000], 
 [5.060000, 9.920000], 
 [23.520000, 26.520000]]
t1.mul(t2): 
[[0.020000, 1.560000], 
 [5.060000, 9.920000], 
 [23.520000, 26.520000]]
t1 * t2
[[0.020000, 1.560000], 
 [5.060000, 9.920000], 
 [23.520000, 26.520000]]
mul(t1, 2.0)
[[0.200000, 2.400000], 
 [4.400000, 6.200000], 
 [9.800000, 10.400000]]
t2.mul(3.0)
[[0.300000, 3.600000], 
 [6.600000, 9.300000], 
 [14.700000, 15.600000]]

3.1.4: div
tensor1: 
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
tensor2: 
[[0.200000, 1.300000], 
 [2.300000, 3.200000], 
 [4.800000, 5.100000]]
div(t1, t2) 
[[0.500000, 0.923077], 
 [0.956522, 0.968750], 
 [1.020833, 1.019608]]
t1.div(t2): 
[[0.500000, 0.923077], 
 [0.956522, 0.968750], 
 [1.020833, 1.019608]]
t1 / t2
[[0.500000, 0.923077], 
 [0.956522, 0.968750], 
 [1.020833, 1.019608]]
div(t1, 2.0)
[[0.050000, 0.600000], 
 [1.100000, 1.550000], 
 [2.450000, 2.600000]]
t2.div(3.0)
[[0.033333, 0.400000], 
 [0.733333, 1.033333], 
 [1.633333, 1.733333]]

3.1.5: log
tensor3: 
[[1, 2], 
 [3, 4], 
 [5, 6]]
t3.log() 
[[0, 0], 
 [1, 1], 
 [1, 1]]

3.2: Reduction operations
3.2.1: sum
tensor4
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
sum(t4, 0) 
[7.200000, 9.500000]
sum(t4, 1) 
[1.300000, 5.300000, 10.100000]
t4.sum(0)
[7.200000, 9.500000]
t4.sum(1)
[1.300000, 5.300000, 10.100000]

3.2.2: mean
tensor4
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
mean(t4, 0) 
[2.400000, 3.166667]
mean(t4, 1) 
[0.650000, 2.650000, 5.050000]
t4.mean(0)
[2.400000, 3.166667]
t4.mean(1)
[0.650000, 2.650000, 5.050000]

3.2.3: max
tensor4
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
max(t4, 0) 
[4.900000, 5.200000]
max(t4, 1) 
[1.200000, 3.100000, 5.200000]
t4.max(0)
[4.900000, 5.200000]
t4.max(1)
[1.200000, 3.100000, 5.200000]

3.2.4: min:
tensor4
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
min(t4, 0) 
[0.100000, 1.200000]
min(t4, 1) 
[0.100000, 2.200000, 4.900000]
t4.min(0)
[0.100000, 1.200000]
t4.min(1)
[0.100000, 2.200000, 4.900000]

3.3: Comparison operations
3.3.1: eq
tensor5: 
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
tensor6: 
[[0.200000, 1.300000], 
 [2.200000, 3.200000], 
 [4.800000, 5.200000]]
eq(t5, t6)
[[0, 0], 
 [1, 0], 
 [0, 1]]
t5.eq(t6)
[[0, 0], 
 [1, 0], 
 [0, 1]]
t5 == t6
[[0, 0], 
 [1, 0], 
 [0, 1]]

3.3.2: ne
tensor5: 
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
tensor6: 
[[0.200000, 1.300000], 
 [2.200000, 3.200000], 
 [4.800000, 5.200000]]
ne(t5, t6)
[[1, 1], 
 [0, 1], 
 [1, 0]]
t5.ne(t6)
[[1, 1], 
 [0, 1], 
 [1, 0]]
t5 != t6
[[1, 1], 
 [0, 1], 
 [1, 0]]

3.3.3: gt
tensor5: 
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
tensor6: 
[[0.200000, 1.300000], 
 [2.200000, 3.200000], 
 [4.800000, 5.200000]]
gt(t5, t6)
[[0, 0], 
 [0, 0], 
 [1, 0]]
t5.gt(t6)
[[0, 0], 
 [0, 0], 
 [1, 0]]
t5 > t6
[[0, 0], 
 [0, 0], 
 [1, 0]]

3.3.4: ge
tensor5: 
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
tensor6: 
[[0.200000, 1.300000], 
 [2.200000, 3.200000], 
 [4.800000, 5.200000]]
ge(t5, t6)
[[0, 0], 
 [1, 0], 
 [1, 1]]
t5.ge(t6)
[[0, 0], 
 [1, 0], 
 [1, 1]]
t5 >= t6
[[0, 0], 
 [1, 0], 
 [1, 1]]

3.3.5: lt
tensor5: 
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
tensor6: 
[[0.200000, 1.300000], 
 [2.200000, 3.200000], 
 [4.800000, 5.200000]]
lt(t5, t6)
[[1, 1], 
 [0, 1], 
 [0, 0]]
t5.lt(t6)
[[1, 1], 
 [0, 1], 
 [0, 0]]
t5 < t6
[[1, 1], 
 [0, 1], 
 [0, 0]]

3.3.6: le
tensor5: 
[[0.100000, 1.200000], 
 [2.200000, 3.100000], 
 [4.900000, 5.200000]]
tensor6: 
[[0.200000, 1.300000], 
 [2.200000, 3.200000], 
 [4.800000, 5.200000]]
le(t5, t6)
[[1, 1], 
 [1, 1], 
 [0, 1]]
t5.le(t6)
[[1, 1], 
 [1, 1], 
 [0, 1]]
t5 <= t6
[[1, 1], 
 [1, 1], 
 [0, 1]]

3.4: einsum

3.4.1: dot product 
tensor8: 
[1, 2, 3]
tensor9: 
[4, 5, 6]
ts::einsum("i,i->", t8, t9);
[32]
ts::einsum("a,a->", t8, t9);
[32]

3.4.2: computes the element-wise product 
tensor8: 
[1, 2, 3]
tensor9: 
[4, 5, 6]
ts::einsum("i,i->i", t8, t9);
[4, 10, 18]

3.4.3:  diagonal
tensor10: 
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]
ts::einsum("ii->i", t10);
[1, 5, 9]

3.4.4: permute
tensor10: 
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]
ts::einsum("ij->ji",t10)
[[1, 4, 7], 
 [2, 5, 8], 
 [3, 6, 9]]
ts::einsum("mn->nm",t10)
[[1, 4, 7], 
 [2, 5, 8], 
 [3, 6, 9]]

3.4.5: outer product
tensor8: 
[1, 2, 3]
tensor9: 
[4, 5, 6]
ts::einsum("i,j->ij", t8, t9);
[[4, 5, 6], 
 [8, 10, 12], 
 [12, 15, 18]]

3.4.6: Batch Matrix Multiplication
tensor11: 
[[[1, 2], 
   [3, 4], 
   [5, 6]], 
 [[7, 8], 
   [9, 10], 
   [11, 12]]]
tensor12: 
[[[1, 2, 3], 
   [4, 5, 6]], 
 [[7, 8, 9], 
   [10, 11, 12]]]
ts::einsum("bij,bjk->bik", t11, t12);
[[[9, 12, 15], 
   [19, 26, 33], 
   [29, 40, 51]], 
 [[129, 144, 159], 
   [163, 182, 201], 
   [197, 220, 243]]]

3.4.7: Trace
tensor13: 
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]
ts::einsum("ii",t13);
[15]

3.4.8: sum over an axis
tensor14: 
[[[1, 2, 3, 4], 
   [5, 6, 7, 8], 
   [9, 10, 11, 12]], 
 [[13, 14, 15, 16], 
   [17, 18, 19, 20], 
   [21, 22, 23, 24]]]
ts::einsum("ijk->jk",t14)
[[14, 16, 18, 20], 
 [22, 24, 26, 28], 
 [30, 32, 34, 36]]
ts::einsum("abc->bc",t14)
[[14, 16, 18, 20], 
 [22, 24, 26, 28], 
 [30, 32, 34, 36]]

3.4.9 matrix elements mul and sum
tensor15: 
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]
tensor16: 
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]
ts::einsum("ij,ij->",t15,t16)
[285]

3.4.10 Sum of a tensor
tensor17: 
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]
ts::einsum("ij->",t17)
[45]

3.4.11 Vector Matrix multiplication
tensor18: 
[[0, 1, 2], 
 [3, 4, 5]]
tensor19: 
[0, 1, 2]
ts::einsum("ik,k->i",t18,t19)
[5, 14]

3.4.12 Matrix Multiplication
tensor15: 
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]
tensor16: 
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]
ts::einsum("ik,kj->ij",t15,t16)
[[30, 36, 42], 
 [66, 81, 96], 
 [102, 126, 150]]

3.4 other functions -- dial()
input vector: 
[2978, 28, 2134, 1700, 3738]
output: 
[[2978, 0, 0, 0, 0], 
 [0, 28, 0, 0, 0], 
 [0, 0, 2134, 0, 0], 
 [0, 0, 0, 1700, 0], 
 [0, 0, 0, 0, 3738]]
input n*n matrix: 
[[0.000000, 1.000000, 2.000000], 
 [3.000000, 4.000000, 5.000000], 
 [6.000000, 7.000000, 8.000000]]
output: 
[0.000000, 4.000000, 8.000000]3.4 other functions -- clone()
input vector: 
[4745, 1196, 595, 1882, 1621]
clone output: 
[4745, 1196, 595, 1882, 1621]
change origin: 
[999, 1196, 595, 1882, 1621]
clone output: 
[4745, 1196, 595, 1882, 1621]
3.4 other functions -- flatten()
input tensor: 
[[0.000000, 1.000000, 2.000000], 
 [3.000000, 4.000000, 5.000000], 
 [6.000000, 7.000000, 8.000000]]
output: 
[0.000000, 1.000000, 2.000000, 3.000000, 4.000000, 5.000000, 6.000000, 7.000000, 8.000000]